#!/usr/bin/env ruby
# encoding: utf-8
#
# Copyright (c) 2018 Zerocracy, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

STDOUT.sync = true

require 'slop'
require 'rainbow'
require_relative '../lib/zold'
require_relative '../lib/zold/version'
require_relative '../lib/zold/wallet'
require_relative '../lib/zold/log'
require_relative '../lib/zold/key'
require_relative '../lib/zold/commands/create'
require_relative '../lib/zold/commands/send'

Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8

log = Zold::Log.new

begin
  opts = Slop.parse(ARGV, strict: true, help: true) do |o|
    o.banner = "Usage: zold [options] command [arguments]
Available commands:
    #{Rainbow('create').green}
      Creates a new wallet with a random ID
    #{Rainbow('pull').green} [id...]
      Pulls all local wallets and new ones explicitly required
    #{Rainbow('send').green} source target amount
      Send ZOLD from one wallet to another
    #{Rainbow('push').green} [id...]
      Push all local wallets or the ones required
Available options:"
    o.string '-d', '--dir',
      'The directory where wallets are stored (default: current directory)',
      default: '.'
    o.string '-p', '--private-key',
      'The location of RSA private key (default: ~/.ssh/id_rsa)',
      default: '~/.ssh/id_rsa'
    o.string '-u', '--public-key',
      'The location of RSA public key (default: ~/.ssh/id_rsa.pub)',
      default: '~/.ssh/id_rsa.pub'
    o.bool '-h', '--help', 'Show these instructions'
    o.on '-v', '--version', 'Show current version' do
      puts Zold::VERSION
      exit
    end
  end

  if opts.help?
    log.info(opts.to_s)
    exit
  end

  raise 'Command is required' if opts.arguments.empty?

  command = opts.arguments[0]

  case command
  when 'create'
    Zold::Create.new(
      dir: opts['dir'],
      pubkey: Zold::Key.new(opts['public-key']),
      log: log
    ).run
  when 'send'
    Zold::Send.new(
      payer: Zold::Wallet.new(
        File.join(opts['dir'], "#{opts.arguments[1]}.xml")
      ),
      receiver: Zold::Wallet.new(
        File.join(opts['dir'], "#{opts.arguments[2]}.xml")
      ),
      amount: opts.arguments[3].to_f * 2 ** 24,
      pvtkey: Zold::Key.new(opts['private-key']),
      log: log
    ).run
  when 'pull'
    raise 'PULL is not implemented yet'
  when 'push'
    raise 'PUSH is not implemented yet'
  else
    raise "Command '#{command}' is not supported"
  end

rescue StandardError => ex
  log.error(ex.message)
  exit -1
end
