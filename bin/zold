#!/usr/bin/env ruby
# encoding: utf-8
#
# Copyright (c) 2018 Zerocracy, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

STDOUT.sync = true

require 'slop'
require 'rainbow'
require_relative '../lib/zold'
require_relative '../lib/zold/version'
require_relative '../lib/zold/wallet'
require_relative '../lib/zold/wallets'
require_relative '../lib/zold/log'
require_relative '../lib/zold/key'
require_relative '../lib/zold/amount'
require_relative '../lib/zold/commands/create'
require_relative '../lib/zold/commands/send'
require_relative '../lib/zold/commands/balance'
require_relative '../lib/zold/commands/check'
require_relative '../lib/zold/commands/pull'
require_relative '../lib/zold/commands/push'

Encoding.default_external = Encoding::UTF_8
Encoding.default_internal = Encoding::UTF_8

log = Zold::Log.new

begin
  opts = Slop.parse(ARGV, strict: true, help: true) do |o|
    o.banner = "Usage: zold [options] command [arguments]
Available commands:
    #{Rainbow('create').green}
      Creates a new wallet with a random ID
    #{Rainbow('pull').green} [id...]
      Pulls all local wallets and new ones explicitly required
    #{Rainbow('check').green} id
      Checks the validity of the wallet
    #{Rainbow('balance').green} id
      Prints the balance of the wallet
    #{Rainbow('send').green} source target amount
      Send ZOLD from one wallet to another
    #{Rainbow('push').green} [id...]
      Push all local wallets or the ones required
Available options:"
    o.string '-d', '--dir',
      'The directory where wallets are stored (default: current directory)',
      default: '.'
    o.string '--private-key',
      'The location of RSA private key (default: ~/.ssh/id_rsa)',
      default: '~/.ssh/id_rsa'
    o.string '--public-key',
      'The location of RSA public key (default: ~/.ssh/id_rsa.pub)',
      default: '~/.ssh/id_rsa.pub'
    o.bool '-h', '--help', 'Show these instructions'
    o.bool '--trace', 'Show full stack trace in case of a problem'
    o.on '--no-colors', 'Disable colors in the ouput' do
      Rainbow.enabled = false
    end
    o.on '-v', '--version', 'Show current version' do
      puts Zold::VERSION
      exit
    end
  end

  if opts.help?
    log.info(opts.to_s)
    exit
  end

  raise 'Command is required' if opts.arguments.empty?

  command = opts.arguments[0]

  wallets = Zold::Wallets.new(opts['dir'])

  case command
  when 'create'
    Zold::Create.new(
      wallets: wallets,
      pubkey: Zold::Key.new(file: opts['public-key']),
      log: log
    ).run
  when 'send'
    raise "Payer wallet ID is required" if opts.arguments[1].nil?
    raise "Recepient wallet ID is required" if opts.arguments[2].nil?
    Zold::Send.new(
      payer: wallets.find(Zold::Id.new(opts.arguments[1])),
      receiver: wallets.find(Zold::Id.new(opts.arguments[2])),
      amount: Zold::Amount.new(zld: opts.arguments[3].to_f),
      pvtkey: Zold::Key.new(file: opts['private-key']),
      log: log
    ).run
  when 'balance'
    raise "Wallet ID is required" if opts.arguments[1].nil?
    Zold::Balance.new(
      wallet: wallets.find(Zold::Id.new(opts.arguments[1])),
      log: log
    ).run
  when 'check'
    raise "Wallet ID is required" if opts.arguments[1].nil?
    Zold::Check.new(
      wallet: wallets.find(Zold::Id.new(opts.arguments[1])),
      wallets: wallets,
      log: log
    ).run
  when 'pull'
    Zold::Pull.new(
      wallet: wallets.find(Zold::Id.new(opts.arguments[1])),
      log: log
    ).run
  when 'push'
    Zold::Push.new(
      wallet: wallets.find(Zold::Id.new(opts.arguments[1])),
      log: log
    ).run
  else
    raise "Command '#{command}' is not supported"
  end
rescue StandardError => ex
  log.error(ex.message)
  puts ex.backtrace if opts['trace']
  exit -1
end
