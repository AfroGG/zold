# Copyright (c) 2018 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'slop'
require_relative '../log'

# PAY command.
# Author:: Yegor Bugayenko (yegor256@gmail.com)
# Copyright:: Copyright (c) 2018 Yegor Bugayenko
# License:: MIT
module Zold
  # Money sending command
  class Pay
    def initialize(wallets:, pvtkey:, log: Log::Quiet.new)
      @wallets = wallets
      @pvtkey = pvtkey
      @log = log
    end

    def run(args = [])
      opts = Slop.parse(args, help: true) do |o|
        o.banner = "Usage: zold pay wallet invoice amount [details] [options]
Where:
    'wallet' is the sender's wallet ID
    'invoice' is the beneficiary's invoice number, generated by 'zold invoice'
    'amount' is the amount to pay, in ZLD, for example '14.95'
    'details' is the optional text to attach to the payment
Available options:"
        o.bool '--force',
          'Ignore all validations',
          default: false
        o.bool '--help', 'Print instructions'
      end
      if opts.help?
        @log.info(opts.to_s)
        return
      end
      raise 'Payer wallet ID is required' if opts.arguments[0].nil?
      from = @wallets.find(Zold::Id.new(opts.arguments[0]))
      raise 'Wallet doesn\'t exist, do \'fetch\' first' unless from.exists?
      raise 'Recepient\'s invoice is required' if opts.arguments[1].nil?
      invoice = opts.arguments[1]
      raise 'Amount is required (in ZLD)' if opts.arguments[2].nil?
      amount = Zold::Amount.new(zld: opts.arguments[2].to_f)
      details = opts.arguments[3] ? opts.arguments[3] : '-'
      pay(from, invoice, amount, details, opts)
    end

    def pay(from, invoice, amount, details, opts)
      unless opts.force?
        raise 'The amount can\'t be zero' if amount.zero?
        raise "The amount can't be negative: #{amount}" if amount.negative?
        if !from.root? && from.balance < @amount
          raise "There is not enough funds in #{from} to send #{amount}, \
  only #{payer.balance} left"
        end
      end
      txn = from.sub(amount, invoice, @pvtkey, details)
      @log.debug("#{amount} sent from #{from} to #{invoice}: #{details}")
      @log.info(txn[:id])
      txn
    end
  end
end
